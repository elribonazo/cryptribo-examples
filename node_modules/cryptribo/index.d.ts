/// <reference types="node" />
import * as t from '@emurgo/cardano-serialization-lib-nodejs/cardano_serialization_lib';
interface Payload {
    [name: string]: any;
}
export declare const expose: () => Promise<typeof t>;
export declare function issueJWTCborToken(payload: Object, privateKey: t.PrivateKey): Promise<string>;
export declare function verifyJWTCborToken(token: string, publicKey: t.PublicKey): Promise<Object>;
export declare function mnemonicToRootKeyPair(mnemonic: string): Promise<t.PrivateKey>;
export declare function encryptWithPin(payload: Payload, pin: string): Promise<string>;
export declare function decryptWithPin(payload: string, pin: string): Promise<Payload>;
export declare function randomPin(n2?: string): Promise<string>;
export declare function signBuffer(msg: Buffer, privKey: t.PrivateKey): Promise<t.Ed25519Signature>;
export declare function verifyBuffer(msg: Buffer, pubKey: t.PublicKey, signature: t.Ed25519Signature): Promise<boolean>;
declare const _default: {
    expose: () => Promise<typeof t>;
    mnemonicToRootKeyPair: typeof mnemonicToRootKeyPair;
    encryptWithPin: typeof encryptWithPin;
    decryptWithPin: typeof decryptWithPin;
    randomPin: typeof randomPin;
    signBuffer: typeof signBuffer;
    verifyBuffer: typeof verifyBuffer;
    issueJWTCborToken: typeof issueJWTCborToken;
    verifyJWTCborToken: typeof verifyJWTCborToken;
};
export default _default;
